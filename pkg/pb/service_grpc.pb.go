// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlsInterpreterClient is the client API for FlsInterpreter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlsInterpreterClient interface {
	//
	//Return service version
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	//
	//Execute FLS scrips
	ScriptExecute(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptResponse, error)
	//
	//Return service version
	Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResetResponse, error)
}

type flsInterpreterClient struct {
	cc grpc.ClientConnInterface
}

func NewFlsInterpreterClient(cc grpc.ClientConnInterface) FlsInterpreterClient {
	return &flsInterpreterClient{cc}
}

func (c *flsInterpreterClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/flsinterpreter.FlsInterpreter/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flsInterpreterClient) ScriptExecute(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptResponse, error) {
	out := new(ScriptResponse)
	err := c.cc.Invoke(ctx, "/flsinterpreter.FlsInterpreter/ScriptExecute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flsInterpreterClient) Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, "/flsinterpreter.FlsInterpreter/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlsInterpreterServer is the server API for FlsInterpreter service.
// All implementations should embed UnimplementedFlsInterpreterServer
// for forward compatibility
type FlsInterpreterServer interface {
	//
	//Return service version
	GetVersion(context.Context, *emptypb.Empty) (*VersionResponse, error)
	//
	//Execute FLS scrips
	ScriptExecute(context.Context, *ScriptRequest) (*ScriptResponse, error)
	//
	//Return service version
	Reset(context.Context, *emptypb.Empty) (*ResetResponse, error)
}

// UnimplementedFlsInterpreterServer should be embedded to have forward compatible implementations.
type UnimplementedFlsInterpreterServer struct {
}

func (UnimplementedFlsInterpreterServer) GetVersion(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedFlsInterpreterServer) ScriptExecute(context.Context, *ScriptRequest) (*ScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptExecute not implemented")
}
func (UnimplementedFlsInterpreterServer) Reset(context.Context, *emptypb.Empty) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}

// UnsafeFlsInterpreterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlsInterpreterServer will
// result in compilation errors.
type UnsafeFlsInterpreterServer interface {
	mustEmbedUnimplementedFlsInterpreterServer()
}

func RegisterFlsInterpreterServer(s grpc.ServiceRegistrar, srv FlsInterpreterServer) {
	s.RegisterService(&FlsInterpreter_ServiceDesc, srv)
}

func _FlsInterpreter_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlsInterpreterServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flsinterpreter.FlsInterpreter/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlsInterpreterServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlsInterpreter_ScriptExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlsInterpreterServer).ScriptExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flsinterpreter.FlsInterpreter/ScriptExecute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlsInterpreterServer).ScriptExecute(ctx, req.(*ScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlsInterpreter_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlsInterpreterServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flsinterpreter.FlsInterpreter/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlsInterpreterServer).Reset(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FlsInterpreter_ServiceDesc is the grpc.ServiceDesc for FlsInterpreter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlsInterpreter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flsinterpreter.FlsInterpreter",
	HandlerType: (*FlsInterpreterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _FlsInterpreter_GetVersion_Handler,
		},
		{
			MethodName: "ScriptExecute",
			Handler:    _FlsInterpreter_ScriptExecute_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _FlsInterpreter_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/alavrovinfb/fls-interpreter/pkg/pb/service.proto",
}
